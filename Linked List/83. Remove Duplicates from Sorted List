83. Remove Duplicates from Sorted List
Easy

2153

139

Add to List

Share
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

----------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        Set<Integer> set = new LinkedHashSet<>();
        while(head!=null){
            set.add(head.val);
            head=head.next;
        }                        
        ListNode newRoot = null;
        ListNode ans =null;
        for(int i : set){
            if(newRoot==null){
                newRoot = new ListNode(i);
                ans=newRoot;
            }else{
                newRoot.next = new ListNode(i);
                newRoot=newRoot.next;
            }
        }                
        return ans;
    }
}
