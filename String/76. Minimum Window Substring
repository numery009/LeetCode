76. Minimum Window Substring
Hard

5352

362

Add to List

Share
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:

Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"
Note:

If there is no such window in S that covers all characters in T, return the empty string "".
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.



-----------------------------------------------------------------------------------------------------------------


class Solution {
    public String minWindow(String s, String t) {
        
        if(s.length()==0 && t.length()==0) return "";
        
        Map<Character,Integer> dicT = new HashMap();
        for(int i=0;i<t.length();i++)
            dicT.put(t.charAt(i),dicT.getOrDefault(t.charAt(i),0)+1);
                        
        int required=dicT.size();
        
        int left=0, right=0;
        int performed=0;
        
        int[] ans = {-1,0,0};
        
        Map<Character,Integer> minimumWindow = new HashMap();        
        
        while(right<s.length()){
            minimumWindow.put(s.charAt(right),minimumWindow.getOrDefault(s.charAt(right),0)+1);
            
            if(dicT.containsKey(s.charAt(right)) && dicT.get(s.charAt(right)).intValue() == minimumWindow.get(s.charAt(right)).intValue())
                performed++;
            
            while(required==performed && left<=right){
                
                if(ans[0]==-1 || ans[0]>right-left+1){
                    ans[0]=right-left+1;
                    ans[1]=left;
                    ans[2]=right;
                }
                                                
                minimumWindow.put(s.charAt(left),minimumWindow.getOrDefault(s.charAt(left),0)-1);
                
                if(dicT.containsKey(s.charAt(left)) && dicT.get(s.charAt(left)).intValue()>minimumWindow.get(s.charAt(left)).intValue())
                    performed--;
                
                left++;
            }                        
            right++;    
        }
                
        return  (ans[0]==-1) ? "" : s.substring(ans[1],ans[2]+1);
    }
}
