273. Integer to English Words
Hard

1215

3122

Add to List

Share
Convert a non-negative integer num to its English words representation.

 

Example 1:

Input: num = 123
Output: "One Hundred Twenty Three"
Example 2:

Input: num = 12345
Output: "Twelve Thousand Three Hundred Forty Five"
Example 3:

Input: num = 1234567
Output: "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"
Example 4:

Input: num = 1234567891
Output: "One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One"
 

Constraints:

0 <= num <= 231 - 1

---------------------------------------------------------------------------------------------------------------


class Solution {
    
    public String one(int number){
        switch(number){
            case 1 : return "One";
            case 2 : return "Two";
            case 3 : return "Three";
            case 4 : return "Four";
            case 5 : return "Five";
            case 6 : return "Six";
            case 7 : return "Seven";
            case 8 : return "Eight";
            case 9 : return "Nine";
        }
        return "";
    }
    
    public String lessThenTwenty(int number){
        switch(number){
            case 10 : return "Ten";    
            case 11 : return "Eleven";
            case 12 : return "Twelve";
            case 13 : return "Thirteen";
            case 14 : return "Fourteen";
            case 15 : return "Fifteen";
            case 16 : return "Sixteen";
            case 17 : return "Seventeen";
            case 18 : return "Eighteen";
            case 19 : return "Nineteen";
        }
        return "";
    }
    
    public String ten(int number){
        switch(number){
            case 2 : return "Twenty"; 
            case 3 : return "Thirty"; 
            case 4 : return "Forty"; 
            case 5 : return "Fifty"; 
            case 6 : return "Sixty"; 
            case 7 : return "Seventy"; 
            case 8 : return "Eighty"; 
            case 9 : return "Ninety"; 
        }
        return "";
    }
    
    
    public String two(int number){
        String result ="";
        if(number <10)
            return one(number);
        else if (number>=10 && number<20)
            return lessThenTwenty(number);
        else{
            int div = number / 10;
            int mod = number % 10;    
            if (div!=0 && mod !=0)                
                result = ten(div) +" "+ one(mod);            
            else if (div!=0 && mod == 0)
                result = ten(div);
            else if (div==0 && mod != 0)
                result = one(mod) ; 
        }
        return result;
    }
    
    public String three(int number){
        
        String result="";
        
        int div = number / 100;
        int mod = number % 100;
        //System.out.println(div +" " + mod);
        if (div!=0 && mod !=0)
            result = two(div) + " Hundred " + two(mod) ; 
        else if (div!=0 && mod == 0)
            result = two(div) + " Hundred";
        else if (div==0 && mod != 0)
            result = two(mod) ; 
        return result;
    }
    
    public String numberToWords(int num) {
        
        if(num==0) return "Zero";                        
        
        String result = "";
                
        int billion = num / 1000000000;
        int million = (num - billion*1000000000)/1000000;
        int thousand = (num - billion*1000000000 - million*1000000)/1000;
        int rest = num - billion*1000000000 - million*1000000 - thousand*1000;
        
                
        if(billion!=0){
            if(!result.isEmpty())
                result+=" ";
            result+= this.three(billion) + " Billion";
        }
                
        if(million!=0){
            if(!result.isEmpty())
                result+=" ";
            result+= this.three(million) + " Million";
        }
        
        if(thousand!=0){
            if(!result.isEmpty())
                result+=" ";            
            result+= this.three(thousand) + " Thousand";                         
        }
        
        if(rest!=0){
            if(!result.isEmpty())
                result+=" ";
            result+= this.three(rest) ;                
        }
                        
        return result;
    }
}
