937. Reorder Data in Log Files
Easy

807

2405

Add to List

Share
You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

Each word after the identifier will consist only of lowercase letters, or;
Each word after the identifier will consist only of digits.
We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.

Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
 

Constraints:

0 <= logs.length <= 100
3 <= logs[i].length <= 100
logs[i] is guaranteed to have an identifier, and a word after the identifier.



---------------------------------------------------------------------------


class Solution {
    public String[] reorderLogFiles(String[] logs) {
        
        if (logs.length==0 || logs == null) return  new String[]{};
        
        
        Arrays.sort(logs,new Comparator<String>(){
           public int compare(String str1, String str2){
               String[] strArr1=str1.split(" ");
               String[] strArr2=str2.split(" ");
               if(Character.isDigit(strArr1[1].charAt(0)) && Character.isDigit(strArr2[1].charAt(0)))
                   return 0;
               else if(!Character.isDigit(strArr1[1].charAt(0)) && Character.isDigit(strArr2[1].charAt(0)))
                   return -1;
               else if(Character.isDigit(strArr1[1].charAt(0)) && !Character.isDigit(strArr2[1].charAt(0)))
                   return 1;
               else{
                   int i=1,j=1;
                   boolean flag = false;
                   while(i<strArr1.length || j<strArr2.length){
                        if(strArr1[i].compareTo(strArr2[j])!=0){
                            flag=true;
                            return strArr1[i].compareTo(strArr2[j]);                          
                        }
                        i++;    
                        j++;                        
                                       
                    }
                    if(!flag){
                        return strArr1[0].compareTo(strArr2[0]); 
                    }
                                                        
                }
               return -1;
           }
        });
         return logs;   
    }
}
