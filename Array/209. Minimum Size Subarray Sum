209. Minimum Size Subarray Sum
Medium

2987

125

Add to List

Share
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 

-----------------------------------------------------------------------------------------------------------


1) class Solution {

    public int minSubArrayLen(int s, int[] nums) {
        
        if(nums.length==0) return 0;
        int sum=0;
        int min = Integer.MAX_VALUE;
        int j=0;
        boolean flag = false;
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
            while(sum>=s){
                min=Math.min(min,i-j+1);
                sum-=nums[j++]; 
                flag=true;
            }
            
        }
        return flag ? min : 0;
    }
}


2) class Solution {

    public int minSubArrayLen(int s, int[] nums) {
        
        if(nums.length==0 || s==0) return 0;
        
        boolean flag=false;
        int minWindowSize=Integer.MAX_VALUE;
        int windowStart=0;
        int currentSum=0;
        for(int windowEnd=0;windowEnd<nums.length;windowEnd++ ){
            currentSum+=nums[windowEnd];
            
            while(currentSum>=s){
                minWindowSize=Math.min(minWindowSize,windowEnd-windowStart+1);
                currentSum-=nums[windowStart];
                windowStart++;
                flag=true;
            }
        }
        return  (flag) ? minWindowSize : 0;
    }
}
