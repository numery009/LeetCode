18. 4Sum
Medium

2510

362

Add to List

Share
Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Notice that the solution set must not contain duplicate quadruplets.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [], target = 0
Output: []
 

Constraints:

0 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109


-------------------------------------------------------------------

1) class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        
    Arrays.sort(nums);
    Set<List<Integer>> result = new LinkedHashSet<>();
    int length = nums.length;
    for (int i = 0; i < length; ++i)
        for (int j = i + 1; j < length; ++j)
            for (int k = j + 1; k < length; ++k)
                for (int l = k + 1; l < length; ++l)
                    if (nums[i] + nums[j] + nums[k] + nums[l] == target)
                        result.add(List.of(nums[i], nums[j], nums[k], nums[l]));
    return new ArrayList<>(result);
        
        
    }
}



2) class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        
        if(nums.length==0) return new ArrayList();
        
        Set<List<Integer>> result = new LinkedHashSet();
        
        Arrays.sort(nums);
        
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++)
                this.twoSum(nums,i,j, result, target);
        }
        return new ArrayList(result);
    }
    
    public void twoSum(int[] nums, int i, int j, Set<List<Integer>> result, int target){
        Set<Integer> set = new HashSet();
        for(int k=j+1;k<nums.length;k++){
            int vector = target - nums[i] - nums[j] - nums[k];
            if(set.contains(vector)){
                result.add(List.of(nums[i],nums[j],nums[k],vector));
                while(k+1<nums.length && nums[k]==nums[k+1])
                    k++;
            }
            set.add(nums[k]);
        }
    }
}
