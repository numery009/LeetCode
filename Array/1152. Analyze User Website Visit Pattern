1152. Analyze User Website Visit Pattern
Medium

113

997

Add to List

Share
We are given some website visits: the user with name username[i] visited the website website[i] at time timestamp[i].

A 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits.  (The websites in a 3-sequence are not necessarily distinct.)

Find the 3-sequence visited by the largest number of users. If there is more than one solution, return the lexicographically smallest such 3-sequence.

 

Example 1:

Input: username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = ["home","about","career","home","cart","maps","home","home","about","career"]
Output: ["home","about","career"]
Explanation: 
The tuples in this example are:
["joe", 1, "home"]
["joe", 2, "about"]
["joe", 3, "career"]
["james", 4, "home"]
["james", 5, "cart"]
["james", 6, "maps"]
["james", 7, "home"]
["mary", 8, "home"]
["mary", 9, "about"]
["mary", 10, "career"]
The 3-sequence ("home", "about", "career") was visited at least once by 2 users.
The 3-sequence ("home", "cart", "maps") was visited at least once by 1 user.
The 3-sequence ("home", "cart", "home") was visited at least once by 1 user.
The 3-sequence ("home", "maps", "home") was visited at least once by 1 user.
The 3-sequence ("cart", "maps", "home") was visited at least once by 1 user.
 

Note:

3 <= N = username.length = timestamp.length = website.length <= 50
1 <= username[i].length <= 10
0 <= timestamp[i] <= 10^9
1 <= website[i].length <= 10
Both username[i] and website[i] contain only lowercase characters.
It is guaranteed that there is at least one user who visited at least 3 websites.
No user visits two websites at the same time.

------------------------------------------------------------------------------------------

1)   class Solution {

    public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {
                
        List<Pair> lst = new ArrayList<>();
        
        for(int i=0;i<username.length;i++){
            lst.add(new Pair(username[i],timestamp[i],website[i]));
        }
                
        Collections.sort(lst,(x,y)->x.getTimeStamp()-y.getTimeStamp());
                        
        Map<String,List<String>> dicT = new HashMap<>();        
        for(Pair pr : lst){
            if(!dicT.containsKey(pr.getUserName()))
                dicT.put(pr.getUserName(), new ArrayList<>());
            dicT.get(pr.getUserName()).add(pr.getWebSite());
        }                                
        
        Map<String,Integer> result = new HashMap<>();
        for(Map.Entry<String,List<String>> entry : dicT.entrySet()){
            Set<String> set = this.sequence(entry.getValue());
            for(String str : set)
                result.put(str,result.getOrDefault(str,0)+1);            
        }                        
                                                                        
        LinkedHashMap<String,Integer> linkedMap = result.entrySet().stream().sorted((x,y)->y.getValue()-               x.getValue()).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)->e1,LinkedHashMap::new));
                                
        Map<String,Integer> res = new HashMap<>();
        int max=0;
        for(Map.Entry<String,Integer> entry : linkedMap.entrySet()){
            if(entry.getValue()>=max){
                res.put(entry.getKey(),entry.getValue());
                max=entry.getValue();
            }
        }
                        
        Iterator it = res.entrySet().iterator();
        Map.Entry<String,Integer> entry = (Map.Entry<String,Integer>) it.next();
        
        if(res.size()>1){
            LinkedHashMap<String,Integer> newRes = res.entrySet().stream().sorted((x,y)->x.getKey().compareTo(y.getKey())).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)->e1,LinkedHashMap::new));
            
            it = newRes.entrySet().iterator();
            entry = (Map.Entry<String,Integer>) it.next();
        }
                        
        
        String[] arr = entry.getKey().split("[,]");
                        
        List<String> finalResult = new ArrayList<>();
        
        for(String s : arr)
            finalResult.add(s);
        
        return finalResult;
    }
    
    
    public Set<String> sequence(List<String> lst){
        Set<String> set = new HashSet<>();
        for(int i=0;i<lst.size()-2;i++){
            for(int j=i+1;j<lst.size()-1;j++){
                for(int k=j+1;k<lst.size();k++){
                    set.add(lst.get(i) +","+lst.get(j) +","+lst.get(k));
                }
            }
        }        
        return set;
    }
    
}

class Pair{
    private String username;
    private int timestamp;
    private String website;
    
    public Pair(String username, int timestamp, String website){
        this.username=username;
        this.timestamp=timestamp;
        this.website=website;
    }
    
    public String getUserName(){
        return username;
    }
    
    public int getTimeStamp(){
        return timestamp;
    }
    
    public String getWebSite(){
        return website;
    }
            
    public String toString(){
        return "username= " + username + " timestamp= " + timestamp +" website= "+ website;
    }
}
