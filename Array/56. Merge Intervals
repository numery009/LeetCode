56. Merge Intervals
Medium

5476

329

Add to List

Share
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

 

Constraints:

intervals[i][0] <= intervals[i][1]


-------------------------------------------------------------------------------------------



class Solution {
    public int[][] merge(int[][] intervals) {
        
        if(intervals.length==0) return new int[][] {};
        
        Arrays.sort(intervals, (a,b)->a[0]-b[0]);
        
      //  Arrays.sort(intervals, new Comparator<int[]>(){
      //     public int  compare(int[] a, int[] b){
      //         return a[0] - b[0];
      //     }
      //  });
        
        List<int[]> lst = new ArrayList<int[]>();
        int[] currentInterval = intervals[0];
        lst.add(currentInterval);
        
        for(int[] interval : intervals){
            int currentStart = currentInterval[0];
            int currentEnd = currentInterval[1];
            int nextStart = interval[0];
            int nextEnd = interval[1];
            
            if(currentEnd>=nextStart)
                currentInterval[1] = Math.max(currentEnd,nextEnd);
            else{
                currentInterval = interval;
                lst.add(currentInterval);
            }
        }
        return lst.toArray(new int[lst.size()][]);        
    }
}
