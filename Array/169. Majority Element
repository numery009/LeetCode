
169. Majority Element
Easy

3954

233

Add to List

Share
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

-----------------------------------------------------------------------------------------------

1) class Solution {
    public int majorityElement(int[] nums) {
        
        if(nums.length==0) return 0;
        
        if(nums.length==1) return nums[0];
        
        Map<Integer,Integer> dicT = new HashMap<>();
        
        for(int i : nums)
            dicT.put(i,dicT.getOrDefault(i,0)+1);                
        
        LinkedHashMap<Integer,Integer> linkedHashMap =dicT.entrySet().stream().sorted((x,y)->y.getValue()-x.getValue())
            .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)->e1,LinkedHashMap::new));
        
        System.out.println(linkedHashMap);
        
        Iterator it = linkedHashMap.entrySet().iterator();
        Map.Entry<Integer,Integer> entry= (Map.Entry)it.next();
                       
        return (entry.getValue()  > nums.length / 2) ? entry.getKey() : 0;
    }
}


2) class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
