897. Increasing Order Search Tree
Easy

1116

511

Add to List

Share
Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.

 

Example 1:


Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
Example 2:


Input: root = [5,1,7]
Output: [1,null,5,null,7]
 

Constraints:

The number of nodes in the given tree will be in the range [1, 100].
0 <= Node.val <= 1000

-----------------------------------------------------------------------------------------------------------------------------



class Solution {
    public TreeNode increasingBST(TreeNode root) {                
        if(root == null) return null;        
        Queue<Integer> lst = new LinkedList<>();
        this.dfs(root, lst);                        
        TreeNode ans=null, nRoot=null;
        while(!lst.isEmpty()){                               
            if(nRoot==null){
                nRoot = new TreeNode(lst.poll());
                ans=nRoot;
            }
            else{
                nRoot.right = new TreeNode(lst.poll());                        
                nRoot = nRoot.right;                    
            }
        }               
        return ans;
    }
          
    public void dfs(TreeNode root, Queue<Integer> lst){        
        if(root==null) return;        
        if(root.left!=null) this.dfs(root.left, lst);                
        lst.add(root.val);        
        if(root.right!=null) this.dfs(root.right, lst);                    
    }                
}




