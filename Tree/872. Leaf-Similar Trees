872. Leaf-Similar Trees
Easy

992

44

Add to List

Share
Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.



For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Example 1:


Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true
Example 2:

Input: root1 = [1], root2 = [1]
Output: true
Example 3:

Input: root1 = [1], root2 = [2]
Output: false
Example 4:

Input: root1 = [1,2], root2 = [2,2]
Output: true
Example 5:


Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false
 

Constraints:

The number of nodes in each tree will be in the range [1, 200].
Both of the given trees will have values in the range [0, 200].

----------------------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        
        if(root1==null && root2==null) return false;
        
        LinkedList<Integer> lst1 = new LinkedList();
        LinkedList<Integer> lst2 = new LinkedList();
        this.dfs(root1,lst1);
        this.dfs(root2,lst2);
        
        //System.out.println(lst1);
        //System.out.println(lst2);
        
        
        return lst1.equals(lst2);
    }
    
    public void dfs(TreeNode root, List<Integer> lst){
        if(root==null) return;
        this.dfs(root.left, lst);
        if(root.left==null && root.right==null)
            //System.out.print(root.val + " ");
            lst.add(root.val);
        this.dfs(root.right,lst);
    }
}
