669. Trim a Binary Search Tree
Easy

2212

197

Add to List

Share
Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.

 

Example 1:


Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]
Example 2:


Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]
Example 3:

Input: root = [1], low = 1, high = 2
Output: [1]
Example 4:

Input: root = [1,null,2], low = 1, high = 3
Output: [1,null,2]
Example 5:

Input: root = [1,null,2], low = 2, high = 4
Output: [2]
 

Constraints:

The number of nodes in the tree in the range [1, 104].
0 <= Node.val <= 104
The value of each node in the tree is unique.
root is guaranteed to be a valid binary search tree.
0 <= low <= high <= 104

---------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> lst =new LinkedList<>();
    TreeNode ans;
    public TreeNode trimBST(TreeNode root, int low, int high) {
        
        if(root==null) return null;
        
        this.dfs(root,low,high);                    
        ans=null;
        
        for(int i : lst)               
            this.ans=this.add(ans,i);                      
        
        return ans;
    }
    
    
    public TreeNode add(TreeNode root, int val){
        if(root==null){
            root = new TreeNode(val);
            return root;
        }    
        
        Queue<TreeNode> q = new LinkedList();
        q.add(root);        
        while(!q.isEmpty()){
            TreeNode n = q.poll();            
            if(n.val>val){
                if(n.left==null)
                    n.left = new TreeNode(val);
                else
                    q.add(n.left);
                }else if(n.val<val){
                    if(n.right==null)
                        n.right = new TreeNode(val);
                    else
                        q.add(n.right);
                }
            }
        
        return root;
    }
    
    public void dfs(TreeNode root, int low, int high){
        
        if(root.val>=low && root.val<=high) lst.add(root.val);    
        
        if(root.left!=null) dfs(root.left,low,high);
        
        if(root.right!=null) dfs(root.right,low,high);
    }
}
